---------- Map x forEach ----------
-Map = percorre o array e executa uma função em cada um de seus itens
    = sempre retorna um novo array 

const array = [1,2,3,4,5];
array.map((item) => item * 2); 
// retorna: 2,4,6,8,10

-forEach
const array = [1,2,3.4,5];
array.forEach((item) => item * 2); 
// retorna: undefined

---------- Filter ----------
- Cria novo array
- Não modifica o array original

//callback: função a ser executada em cada elemento
//thisArg: opcional, valor de this dentro da função de callback
array.filter(callback, thisArg)
EX:
const frutas = ['maçã fuji', 'maçã verde', 'laranja', 'abacaxi'];
frutas.filter((frutas) => fruta.includes('maçã'));
// retorna: ['maçã fuji', 'maçã verde']

---------- Reduce ----------
-Executa uma função em todos os elementos do array, retornando um valor único.
-Apenas um valor que pode ou não ser um array 

//callback: função a ser executada a partir do acumulador
//initialValue: opcional, valor sobre o qual o retorno final irá atuar
array.reduce(callback, initialValue)

EX:
const callbackFn = function(accumulator, currentValue, index, array){
  // fazer algo
}
array.reduce(callbackFn, initialValue)
// accumulator/prevValue: acumulador de todas as chamadas de callbackFn
// currentValue: elemento atual sendo acessado pela função



